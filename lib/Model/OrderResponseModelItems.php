<?php
/**
 * OrderResponseModelItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Print-Gateway-prod
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2019-09-18T08:39:50Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrderResponseModelItems Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderResponseModelItems implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderResponseModel_items';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'has_sticky_slip' => 'bool',
        'sender_address' => '\Swagger\Client\Model\SenderAddress1',
        'order_number' => 'float',
        'print_coupon' => 'string',
        'quantity' => 'float',
        'order_id' => 'float',
        'order_item_id' => 'float',
        'sales_price' => 'float',
        'delivery_promise' => 'bool',
        'sales_price_incl_tax' => 'float',
        'shipments' => '\Swagger\Client\Model\OrderResponseModelShipments1[]',
        'discount_percentage' => 'float',
        'printjob_id' => 'string',
        'shipping_price' => 'float',
        'service_price' => 'float',
        'customer_reference' => 'string',
        'name' => 'string',
        'normal_price' => 'float',
        'options' => 'object',
        'order_item_number' => 'string',
        'delivery_promise_price' => 'float',
        'sku' => 'string',
        'product_price' => 'float',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'has_sticky_slip' => null,
        'sender_address' => null,
        'order_number' => null,
        'print_coupon' => null,
        'quantity' => null,
        'order_id' => null,
        'order_item_id' => null,
        'sales_price' => null,
        'delivery_promise' => null,
        'sales_price_incl_tax' => null,
        'shipments' => null,
        'discount_percentage' => null,
        'printjob_id' => null,
        'shipping_price' => null,
        'service_price' => null,
        'customer_reference' => null,
        'name' => null,
        'normal_price' => null,
        'options' => null,
        'order_item_number' => null,
        'delivery_promise_price' => null,
        'sku' => null,
        'product_price' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'has_sticky_slip' => 'hasStickySlip',
        'sender_address' => 'senderAddress',
        'order_number' => 'orderNumber',
        'print_coupon' => 'printCoupon',
        'quantity' => 'quantity',
        'order_id' => 'orderId',
        'order_item_id' => 'orderItemId',
        'sales_price' => 'salesPrice',
        'delivery_promise' => 'deliveryPromise',
        'sales_price_incl_tax' => 'salesPriceInclTax',
        'shipments' => 'shipments',
        'discount_percentage' => 'discountPercentage',
        'printjob_id' => 'printjobId',
        'shipping_price' => 'shippingPrice',
        'service_price' => 'servicePrice',
        'customer_reference' => 'customerReference',
        'name' => 'name',
        'normal_price' => 'normalPrice',
        'options' => 'options',
        'order_item_number' => 'orderItemNumber',
        'delivery_promise_price' => 'deliveryPromisePrice',
        'sku' => 'sku',
        'product_price' => 'productPrice',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'has_sticky_slip' => 'setHasStickySlip',
        'sender_address' => 'setSenderAddress',
        'order_number' => 'setOrderNumber',
        'print_coupon' => 'setPrintCoupon',
        'quantity' => 'setQuantity',
        'order_id' => 'setOrderId',
        'order_item_id' => 'setOrderItemId',
        'sales_price' => 'setSalesPrice',
        'delivery_promise' => 'setDeliveryPromise',
        'sales_price_incl_tax' => 'setSalesPriceInclTax',
        'shipments' => 'setShipments',
        'discount_percentage' => 'setDiscountPercentage',
        'printjob_id' => 'setPrintjobId',
        'shipping_price' => 'setShippingPrice',
        'service_price' => 'setServicePrice',
        'customer_reference' => 'setCustomerReference',
        'name' => 'setName',
        'normal_price' => 'setNormalPrice',
        'options' => 'setOptions',
        'order_item_number' => 'setOrderItemNumber',
        'delivery_promise_price' => 'setDeliveryPromisePrice',
        'sku' => 'setSku',
        'product_price' => 'setProductPrice',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'has_sticky_slip' => 'getHasStickySlip',
        'sender_address' => 'getSenderAddress',
        'order_number' => 'getOrderNumber',
        'print_coupon' => 'getPrintCoupon',
        'quantity' => 'getQuantity',
        'order_id' => 'getOrderId',
        'order_item_id' => 'getOrderItemId',
        'sales_price' => 'getSalesPrice',
        'delivery_promise' => 'getDeliveryPromise',
        'sales_price_incl_tax' => 'getSalesPriceInclTax',
        'shipments' => 'getShipments',
        'discount_percentage' => 'getDiscountPercentage',
        'printjob_id' => 'getPrintjobId',
        'shipping_price' => 'getShippingPrice',
        'service_price' => 'getServicePrice',
        'customer_reference' => 'getCustomerReference',
        'name' => 'getName',
        'normal_price' => 'getNormalPrice',
        'options' => 'getOptions',
        'order_item_number' => 'getOrderItemNumber',
        'delivery_promise_price' => 'getDeliveryPromisePrice',
        'sku' => 'getSku',
        'product_price' => 'getProductPrice',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_ACCEPTEDBYSUPPLIER = 'ACCEPTEDBYSUPPLIER';
    const STATUS_CANCELEDBYSUPPLIER = 'CANCELEDBYSUPPLIER';
    const STATUS_CANCELEDBYUSER = 'CANCELEDBYUSER';
    const STATUS_CUT = 'CUT';
    const STATUS_DELIVERED = 'DELIVERED';
    const STATUS_DESIGNADDED = 'DESIGNADDED';
    const STATUS_DESIGNCONFIRMED = 'DESIGNCONFIRMED';
    const STATUS_DESIGNREJECTED = 'DESIGNREJECTED';
    const STATUS_DESIGNWARNING = 'DESIGNWARNING';
    const STATUS_FINISHED = 'FINISHED';
    const STATUS_INTRANSIT = 'INTRANSIT';
    const STATUS_MANUALCHECK = 'MANUALCHECK';
    const STATUS_ONHOLD = 'ONHOLD';
    const STATUS_ORDERRECEIVED = 'ORDERRECEIVED';
    const STATUS_PACKED = 'PACKED';
    const STATUS_POSSIBLYDELAYED = 'POSSIBLYDELAYED';
    const STATUS_PRINTED = 'PRINTED';
    const STATUS_QUALITYAPPROVED = 'QUALITYAPPROVED';
    const STATUS_QUALITYREJECTED = 'QUALITYREJECTED';
    const STATUS_READYFORPRODUCTION = 'READYFORPRODUCTION';
    const STATUS_REFUSEDBYSUPPLIER = 'REFUSEDBYSUPPLIER';
    const STATUS_RETURNED = 'RETURNED';
    const STATUS_RETURNREQUESTED = 'RETURNREQUESTED';
    const STATUS_SENTTOSUPPLIER = 'SENTTOSUPPLIER';
    const STATUS_SHIPPED = 'SHIPPED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACCEPTEDBYSUPPLIER,
            self::STATUS_CANCELEDBYSUPPLIER,
            self::STATUS_CANCELEDBYUSER,
            self::STATUS_CUT,
            self::STATUS_DELIVERED,
            self::STATUS_DESIGNADDED,
            self::STATUS_DESIGNCONFIRMED,
            self::STATUS_DESIGNREJECTED,
            self::STATUS_DESIGNWARNING,
            self::STATUS_FINISHED,
            self::STATUS_INTRANSIT,
            self::STATUS_MANUALCHECK,
            self::STATUS_ONHOLD,
            self::STATUS_ORDERRECEIVED,
            self::STATUS_PACKED,
            self::STATUS_POSSIBLYDELAYED,
            self::STATUS_PRINTED,
            self::STATUS_QUALITYAPPROVED,
            self::STATUS_QUALITYREJECTED,
            self::STATUS_READYFORPRODUCTION,
            self::STATUS_REFUSEDBYSUPPLIER,
            self::STATUS_RETURNED,
            self::STATUS_RETURNREQUESTED,
            self::STATUS_SENTTOSUPPLIER,
            self::STATUS_SHIPPED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['has_sticky_slip'] = isset($data['has_sticky_slip']) ? $data['has_sticky_slip'] : null;
        $this->container['sender_address'] = isset($data['sender_address']) ? $data['sender_address'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['print_coupon'] = isset($data['print_coupon']) ? $data['print_coupon'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['order_item_id'] = isset($data['order_item_id']) ? $data['order_item_id'] : null;
        $this->container['sales_price'] = isset($data['sales_price']) ? $data['sales_price'] : null;
        $this->container['delivery_promise'] = isset($data['delivery_promise']) ? $data['delivery_promise'] : null;
        $this->container['sales_price_incl_tax'] = isset($data['sales_price_incl_tax']) ? $data['sales_price_incl_tax'] : null;
        $this->container['shipments'] = isset($data['shipments']) ? $data['shipments'] : null;
        $this->container['discount_percentage'] = isset($data['discount_percentage']) ? $data['discount_percentage'] : null;
        $this->container['printjob_id'] = isset($data['printjob_id']) ? $data['printjob_id'] : null;
        $this->container['shipping_price'] = isset($data['shipping_price']) ? $data['shipping_price'] : null;
        $this->container['service_price'] = isset($data['service_price']) ? $data['service_price'] : null;
        $this->container['customer_reference'] = isset($data['customer_reference']) ? $data['customer_reference'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['normal_price'] = isset($data['normal_price']) ? $data['normal_price'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['order_item_number'] = isset($data['order_item_number']) ? $data['order_item_number'] : null;
        $this->container['delivery_promise_price'] = isset($data['delivery_promise_price']) ? $data['delivery_promise_price'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['product_price'] = isset($data['product_price']) ? $data['product_price'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sender_address'] === null) {
            $invalidProperties[] = "'sender_address' can't be null";
        }
        if ($this->container['order_number'] === null) {
            $invalidProperties[] = "'order_number' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['order_item_id'] === null) {
            $invalidProperties[] = "'order_item_id' can't be null";
        }
        if ($this->container['sales_price'] === null) {
            $invalidProperties[] = "'sales_price' can't be null";
        }
        if ($this->container['sales_price_incl_tax'] === null) {
            $invalidProperties[] = "'sales_price_incl_tax' can't be null";
        }
        if ($this->container['shipments'] === null) {
            $invalidProperties[] = "'shipments' can't be null";
        }
        if ($this->container['shipping_price'] === null) {
            $invalidProperties[] = "'shipping_price' can't be null";
        }
        if ($this->container['service_price'] === null) {
            $invalidProperties[] = "'service_price' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['normal_price'] === null) {
            $invalidProperties[] = "'normal_price' can't be null";
        }
        if ($this->container['options'] === null) {
            $invalidProperties[] = "'options' can't be null";
        }
        if ($this->container['order_item_number'] === null) {
            $invalidProperties[] = "'order_item_number' can't be null";
        }
        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        if ($this->container['product_price'] === null) {
            $invalidProperties[] = "'product_price' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets has_sticky_slip
     *
     * @return bool
     */
    public function getHasStickySlip()
    {
        return $this->container['has_sticky_slip'];
    }

    /**
     * Sets has_sticky_slip
     *
     * @param bool $has_sticky_slip has_sticky_slip
     *
     * @return $this
     */
    public function setHasStickySlip($has_sticky_slip)
    {
        $this->container['has_sticky_slip'] = $has_sticky_slip;

        return $this;
    }

    /**
     * Gets sender_address
     *
     * @return \Swagger\Client\Model\SenderAddress1
     */
    public function getSenderAddress()
    {
        return $this->container['sender_address'];
    }

    /**
     * Sets sender_address
     *
     * @param \Swagger\Client\Model\SenderAddress1 $sender_address sender_address
     *
     * @return $this
     */
    public function setSenderAddress($sender_address)
    {
        $this->container['sender_address'] = $sender_address;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return float
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param float $order_number order_number
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets print_coupon
     *
     * @return string
     */
    public function getPrintCoupon()
    {
        return $this->container['print_coupon'];
    }

    /**
     * Sets print_coupon
     *
     * @param string $print_coupon print_coupon
     *
     * @return $this
     */
    public function setPrintCoupon($print_coupon)
    {
        $this->container['print_coupon'] = $print_coupon;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return float
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param float $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_item_id
     *
     * @return float
     */
    public function getOrderItemId()
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param float $order_item_id order_item_id
     *
     * @return $this
     */
    public function setOrderItemId($order_item_id)
    {
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets sales_price
     *
     * @return float
     */
    public function getSalesPrice()
    {
        return $this->container['sales_price'];
    }

    /**
     * Sets sales_price
     *
     * @param float $sales_price sales_price
     *
     * @return $this
     */
    public function setSalesPrice($sales_price)
    {
        $this->container['sales_price'] = $sales_price;

        return $this;
    }

    /**
     * Gets delivery_promise
     *
     * @return bool
     */
    public function getDeliveryPromise()
    {
        return $this->container['delivery_promise'];
    }

    /**
     * Sets delivery_promise
     *
     * @param bool $delivery_promise delivery_promise
     *
     * @return $this
     */
    public function setDeliveryPromise($delivery_promise)
    {
        $this->container['delivery_promise'] = $delivery_promise;

        return $this;
    }

    /**
     * Gets sales_price_incl_tax
     *
     * @return float
     */
    public function getSalesPriceInclTax()
    {
        return $this->container['sales_price_incl_tax'];
    }

    /**
     * Sets sales_price_incl_tax
     *
     * @param float $sales_price_incl_tax sales_price_incl_tax
     *
     * @return $this
     */
    public function setSalesPriceInclTax($sales_price_incl_tax)
    {
        $this->container['sales_price_incl_tax'] = $sales_price_incl_tax;

        return $this;
    }

    /**
     * Gets shipments
     *
     * @return \Swagger\Client\Model\OrderResponseModelShipments1[]
     */
    public function getShipments()
    {
        return $this->container['shipments'];
    }

    /**
     * Sets shipments
     *
     * @param \Swagger\Client\Model\OrderResponseModelShipments1[] $shipments shipments
     *
     * @return $this
     */
    public function setShipments($shipments)
    {
        $this->container['shipments'] = $shipments;

        return $this;
    }

    /**
     * Gets discount_percentage
     *
     * @return float
     */
    public function getDiscountPercentage()
    {
        return $this->container['discount_percentage'];
    }

    /**
     * Sets discount_percentage
     *
     * @param float $discount_percentage discount_percentage
     *
     * @return $this
     */
    public function setDiscountPercentage($discount_percentage)
    {
        $this->container['discount_percentage'] = $discount_percentage;

        return $this;
    }

    /**
     * Gets printjob_id
     *
     * @return string
     */
    public function getPrintjobId()
    {
        return $this->container['printjob_id'];
    }

    /**
     * Sets printjob_id
     *
     * @param string $printjob_id printjob_id
     *
     * @return $this
     */
    public function setPrintjobId($printjob_id)
    {
        $this->container['printjob_id'] = $printjob_id;

        return $this;
    }

    /**
     * Gets shipping_price
     *
     * @return float
     */
    public function getShippingPrice()
    {
        return $this->container['shipping_price'];
    }

    /**
     * Sets shipping_price
     *
     * @param float $shipping_price shipping_price
     *
     * @return $this
     */
    public function setShippingPrice($shipping_price)
    {
        $this->container['shipping_price'] = $shipping_price;

        return $this;
    }

    /**
     * Gets service_price
     *
     * @return float
     */
    public function getServicePrice()
    {
        return $this->container['service_price'];
    }

    /**
     * Sets service_price
     *
     * @param float $service_price service_price
     *
     * @return $this
     */
    public function setServicePrice($service_price)
    {
        $this->container['service_price'] = $service_price;

        return $this;
    }

    /**
     * Gets customer_reference
     *
     * @return string
     */
    public function getCustomerReference()
    {
        return $this->container['customer_reference'];
    }

    /**
     * Sets customer_reference
     *
     * @param string $customer_reference customer_reference
     *
     * @return $this
     */
    public function setCustomerReference($customer_reference)
    {
        $this->container['customer_reference'] = $customer_reference;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets normal_price
     *
     * @return float
     */
    public function getNormalPrice()
    {
        return $this->container['normal_price'];
    }

    /**
     * Sets normal_price
     *
     * @param float $normal_price normal_price
     *
     * @return $this
     */
    public function setNormalPrice($normal_price)
    {
        $this->container['normal_price'] = $normal_price;

        return $this;
    }

    /**
     * Gets options
     *
     * @return object
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param object $options options
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets order_item_number
     *
     * @return string
     */
    public function getOrderItemNumber()
    {
        return $this->container['order_item_number'];
    }

    /**
     * Sets order_item_number
     *
     * @param string $order_item_number order_item_number
     *
     * @return $this
     */
    public function setOrderItemNumber($order_item_number)
    {
        $this->container['order_item_number'] = $order_item_number;

        return $this;
    }

    /**
     * Gets delivery_promise_price
     *
     * @return float
     */
    public function getDeliveryPromisePrice()
    {
        return $this->container['delivery_promise_price'];
    }

    /**
     * Sets delivery_promise_price
     *
     * @param float $delivery_promise_price delivery_promise_price
     *
     * @return $this
     */
    public function setDeliveryPromisePrice($delivery_promise_price)
    {
        $this->container['delivery_promise_price'] = $delivery_promise_price;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets product_price
     *
     * @return float
     */
    public function getProductPrice()
    {
        return $this->container['product_price'];
    }

    /**
     * Sets product_price
     *
     * @param float $product_price product_price
     *
     * @return $this
     */
    public function setProductPrice($product_price)
    {
        $this->container['product_price'] = $product_price;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


