<?php
/**
 * SenderAddress1
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Print-Gateway-prod
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2019-09-18T08:39:50Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SenderAddress1 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SenderAddress1 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'senderAddress_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country' => 'string',
        'last_name' => 'string',
        'vat_nr' => 'string',
        'city' => 'string',
        'company_name' => 'string',
        'sticky_slip_image_id' => 'string',
        'postcode' => 'string',
        'is_default_address' => 'bool',
        'telephone' => 'string',
        'fullstreet' => 'string',
        'first_name' => 'string',
        'coc_nr' => 'string',
        'email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'country' => null,
        'last_name' => null,
        'vat_nr' => null,
        'city' => null,
        'company_name' => null,
        'sticky_slip_image_id' => null,
        'postcode' => null,
        'is_default_address' => null,
        'telephone' => null,
        'fullstreet' => null,
        'first_name' => null,
        'coc_nr' => null,
        'email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'last_name' => 'lastName',
        'vat_nr' => 'vatNr',
        'city' => 'city',
        'company_name' => 'companyName',
        'sticky_slip_image_id' => 'stickySlipImageId',
        'postcode' => 'postcode',
        'is_default_address' => 'isDefaultAddress',
        'telephone' => 'telephone',
        'fullstreet' => 'fullstreet',
        'first_name' => 'firstName',
        'coc_nr' => 'cocNr',
        'email' => 'email'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'last_name' => 'setLastName',
        'vat_nr' => 'setVatNr',
        'city' => 'setCity',
        'company_name' => 'setCompanyName',
        'sticky_slip_image_id' => 'setStickySlipImageId',
        'postcode' => 'setPostcode',
        'is_default_address' => 'setIsDefaultAddress',
        'telephone' => 'setTelephone',
        'fullstreet' => 'setFullstreet',
        'first_name' => 'setFirstName',
        'coc_nr' => 'setCocNr',
        'email' => 'setEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'last_name' => 'getLastName',
        'vat_nr' => 'getVatNr',
        'city' => 'getCity',
        'company_name' => 'getCompanyName',
        'sticky_slip_image_id' => 'getStickySlipImageId',
        'postcode' => 'getPostcode',
        'is_default_address' => 'getIsDefaultAddress',
        'telephone' => 'getTelephone',
        'fullstreet' => 'getFullstreet',
        'first_name' => 'getFirstName',
        'coc_nr' => 'getCocNr',
        'email' => 'getEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['vat_nr'] = isset($data['vat_nr']) ? $data['vat_nr'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['sticky_slip_image_id'] = isset($data['sticky_slip_image_id']) ? $data['sticky_slip_image_id'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['is_default_address'] = isset($data['is_default_address']) ? $data['is_default_address'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['fullstreet'] = isset($data['fullstreet']) ? $data['fullstreet'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['coc_nr'] = isset($data['coc_nr']) ? $data['coc_nr'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['postcode'] === null) {
            $invalidProperties[] = "'postcode' can't be null";
        }
        if ($this->container['fullstreet'] === null) {
            $invalidProperties[] = "'fullstreet' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets vat_nr
     *
     * @return string
     */
    public function getVatNr()
    {
        return $this->container['vat_nr'];
    }

    /**
     * Sets vat_nr
     *
     * @param string $vat_nr vat_nr
     *
     * @return $this
     */
    public function setVatNr($vat_nr)
    {
        $this->container['vat_nr'] = $vat_nr;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets sticky_slip_image_id
     *
     * @return string
     */
    public function getStickySlipImageId()
    {
        return $this->container['sticky_slip_image_id'];
    }

    /**
     * Sets sticky_slip_image_id
     *
     * @param string $sticky_slip_image_id sticky_slip_image_id
     *
     * @return $this
     */
    public function setStickySlipImageId($sticky_slip_image_id)
    {
        $this->container['sticky_slip_image_id'] = $sticky_slip_image_id;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode postcode
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets is_default_address
     *
     * @return bool
     */
    public function getIsDefaultAddress()
    {
        return $this->container['is_default_address'];
    }

    /**
     * Sets is_default_address
     *
     * @param bool $is_default_address is_default_address
     *
     * @return $this
     */
    public function setIsDefaultAddress($is_default_address)
    {
        $this->container['is_default_address'] = $is_default_address;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone telephone
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets fullstreet
     *
     * @return string
     */
    public function getFullstreet()
    {
        return $this->container['fullstreet'];
    }

    /**
     * Sets fullstreet
     *
     * @param string $fullstreet Name of street including house number
     *
     * @return $this
     */
    public function setFullstreet($fullstreet)
    {
        $this->container['fullstreet'] = $fullstreet;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets coc_nr
     *
     * @return string
     */
    public function getCocNr()
    {
        return $this->container['coc_nr'];
    }

    /**
     * Sets coc_nr
     *
     * @param string $coc_nr coc_nr
     *
     * @return $this
     */
    public function setCocNr($coc_nr)
    {
        $this->container['coc_nr'] = $coc_nr;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


