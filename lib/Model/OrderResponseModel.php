<?php
/**
 * OrderResponseModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Print-Gateway-prod
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2019-09-18T08:39:50Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrderResponseModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderResponseModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_number' => 'string',
        'grand_total' => 'float',
        'created' => '\DateTime',
        'order_tax' => 'float',
        'shipments' => '\Swagger\Client\Model\OrderResponseModelShipments[]',
        'order_total' => 'float',
        'shipping_price' => 'float',
        'customer_reference' => 'string',
        'order_due' => 'float',
        'currency' => 'string',
        'invoice_id' => 'string',
        'billing_address' => '\Swagger\Client\Model\BillingAddress1',
        'id' => 'float',
        'items' => '\Swagger\Client\Model\OrderResponseModelItems[]',
        'po_number' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_number' => null,
        'grand_total' => null,
        'created' => 'date-time',
        'order_tax' => null,
        'shipments' => null,
        'order_total' => null,
        'shipping_price' => null,
        'customer_reference' => null,
        'order_due' => null,
        'currency' => null,
        'invoice_id' => null,
        'billing_address' => null,
        'id' => null,
        'items' => null,
        'po_number' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_number' => 'orderNumber',
        'grand_total' => 'grandTotal',
        'created' => 'created',
        'order_tax' => 'orderTax',
        'shipments' => 'shipments',
        'order_total' => 'orderTotal',
        'shipping_price' => 'shippingPrice',
        'customer_reference' => 'customerReference',
        'order_due' => 'orderDue',
        'currency' => 'currency',
        'invoice_id' => 'invoiceId',
        'billing_address' => 'billingAddress',
        'id' => 'id',
        'items' => 'items',
        'po_number' => 'poNumber',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_number' => 'setOrderNumber',
        'grand_total' => 'setGrandTotal',
        'created' => 'setCreated',
        'order_tax' => 'setOrderTax',
        'shipments' => 'setShipments',
        'order_total' => 'setOrderTotal',
        'shipping_price' => 'setShippingPrice',
        'customer_reference' => 'setCustomerReference',
        'order_due' => 'setOrderDue',
        'currency' => 'setCurrency',
        'invoice_id' => 'setInvoiceId',
        'billing_address' => 'setBillingAddress',
        'id' => 'setId',
        'items' => 'setItems',
        'po_number' => 'setPoNumber',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_number' => 'getOrderNumber',
        'grand_total' => 'getGrandTotal',
        'created' => 'getCreated',
        'order_tax' => 'getOrderTax',
        'shipments' => 'getShipments',
        'order_total' => 'getOrderTotal',
        'shipping_price' => 'getShippingPrice',
        'customer_reference' => 'getCustomerReference',
        'order_due' => 'getOrderDue',
        'currency' => 'getCurrency',
        'invoice_id' => 'getInvoiceId',
        'billing_address' => 'getBillingAddress',
        'id' => 'getId',
        'items' => 'getItems',
        'po_number' => 'getPoNumber',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_ACCEPTEDBYSUPPLIER = 'ACCEPTEDBYSUPPLIER';
    const STATUS_CANCELEDBYSUPPLIER = 'CANCELEDBYSUPPLIER';
    const STATUS_CANCELEDBYUSER = 'CANCELEDBYUSER';
    const STATUS_CUT = 'CUT';
    const STATUS_DELIVERED = 'DELIVERED';
    const STATUS_DESIGNADDED = 'DESIGNADDED';
    const STATUS_DESIGNCONFIRMED = 'DESIGNCONFIRMED';
    const STATUS_DESIGNREJECTED = 'DESIGNREJECTED';
    const STATUS_DESIGNWARNING = 'DESIGNWARNING';
    const STATUS_FINISHED = 'FINISHED';
    const STATUS_INTRANSIT = 'INTRANSIT';
    const STATUS_MANUALCHECK = 'MANUALCHECK';
    const STATUS_ONHOLD = 'ONHOLD';
    const STATUS_ORDERRECEIVED = 'ORDERRECEIVED';
    const STATUS_PACKED = 'PACKED';
    const STATUS_POSSIBLYDELAYED = 'POSSIBLYDELAYED';
    const STATUS_PRINTED = 'PRINTED';
    const STATUS_QUALITYAPPROVED = 'QUALITYAPPROVED';
    const STATUS_QUALITYREJECTED = 'QUALITYREJECTED';
    const STATUS_READYFORPRODUCTION = 'READYFORPRODUCTION';
    const STATUS_REFUSEDBYSUPPLIER = 'REFUSEDBYSUPPLIER';
    const STATUS_RETURNED = 'RETURNED';
    const STATUS_RETURNREQUESTED = 'RETURNREQUESTED';
    const STATUS_SENTTOSUPPLIER = 'SENTTOSUPPLIER';
    const STATUS_SHIPPED = 'SHIPPED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACCEPTEDBYSUPPLIER,
            self::STATUS_CANCELEDBYSUPPLIER,
            self::STATUS_CANCELEDBYUSER,
            self::STATUS_CUT,
            self::STATUS_DELIVERED,
            self::STATUS_DESIGNADDED,
            self::STATUS_DESIGNCONFIRMED,
            self::STATUS_DESIGNREJECTED,
            self::STATUS_DESIGNWARNING,
            self::STATUS_FINISHED,
            self::STATUS_INTRANSIT,
            self::STATUS_MANUALCHECK,
            self::STATUS_ONHOLD,
            self::STATUS_ORDERRECEIVED,
            self::STATUS_PACKED,
            self::STATUS_POSSIBLYDELAYED,
            self::STATUS_PRINTED,
            self::STATUS_QUALITYAPPROVED,
            self::STATUS_QUALITYREJECTED,
            self::STATUS_READYFORPRODUCTION,
            self::STATUS_REFUSEDBYSUPPLIER,
            self::STATUS_RETURNED,
            self::STATUS_RETURNREQUESTED,
            self::STATUS_SENTTOSUPPLIER,
            self::STATUS_SHIPPED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['grand_total'] = isset($data['grand_total']) ? $data['grand_total'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['order_tax'] = isset($data['order_tax']) ? $data['order_tax'] : null;
        $this->container['shipments'] = isset($data['shipments']) ? $data['shipments'] : null;
        $this->container['order_total'] = isset($data['order_total']) ? $data['order_total'] : null;
        $this->container['shipping_price'] = isset($data['shipping_price']) ? $data['shipping_price'] : null;
        $this->container['customer_reference'] = isset($data['customer_reference']) ? $data['customer_reference'] : null;
        $this->container['order_due'] = isset($data['order_due']) ? $data['order_due'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['po_number'] = isset($data['po_number']) ? $data['po_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_number'] === null) {
            $invalidProperties[] = "'order_number' can't be null";
        }
        if ($this->container['grand_total'] === null) {
            $invalidProperties[] = "'grand_total' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['order_tax'] === null) {
            $invalidProperties[] = "'order_tax' can't be null";
        }
        if ($this->container['order_total'] === null) {
            $invalidProperties[] = "'order_total' can't be null";
        }
        if ($this->container['shipping_price'] === null) {
            $invalidProperties[] = "'shipping_price' can't be null";
        }
        if ($this->container['order_due'] === null) {
            $invalidProperties[] = "'order_due' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number order_number
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets grand_total
     *
     * @return float
     */
    public function getGrandTotal()
    {
        return $this->container['grand_total'];
    }

    /**
     * Sets grand_total
     *
     * @param float $grand_total grand_total
     *
     * @return $this
     */
    public function setGrandTotal($grand_total)
    {
        $this->container['grand_total'] = $grand_total;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Enables basic storage and retrieval of dates and times.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets order_tax
     *
     * @return float
     */
    public function getOrderTax()
    {
        return $this->container['order_tax'];
    }

    /**
     * Sets order_tax
     *
     * @param float $order_tax order_tax
     *
     * @return $this
     */
    public function setOrderTax($order_tax)
    {
        $this->container['order_tax'] = $order_tax;

        return $this;
    }

    /**
     * Gets shipments
     *
     * @return \Swagger\Client\Model\OrderResponseModelShipments[]
     */
    public function getShipments()
    {
        return $this->container['shipments'];
    }

    /**
     * Sets shipments
     *
     * @param \Swagger\Client\Model\OrderResponseModelShipments[] $shipments shipments
     *
     * @return $this
     */
    public function setShipments($shipments)
    {
        $this->container['shipments'] = $shipments;

        return $this;
    }

    /**
     * Gets order_total
     *
     * @return float
     */
    public function getOrderTotal()
    {
        return $this->container['order_total'];
    }

    /**
     * Sets order_total
     *
     * @param float $order_total order_total
     *
     * @return $this
     */
    public function setOrderTotal($order_total)
    {
        $this->container['order_total'] = $order_total;

        return $this;
    }

    /**
     * Gets shipping_price
     *
     * @return float
     */
    public function getShippingPrice()
    {
        return $this->container['shipping_price'];
    }

    /**
     * Sets shipping_price
     *
     * @param float $shipping_price shipping_price
     *
     * @return $this
     */
    public function setShippingPrice($shipping_price)
    {
        $this->container['shipping_price'] = $shipping_price;

        return $this;
    }

    /**
     * Gets customer_reference
     *
     * @return string
     */
    public function getCustomerReference()
    {
        return $this->container['customer_reference'];
    }

    /**
     * Sets customer_reference
     *
     * @param string $customer_reference customer_reference
     *
     * @return $this
     */
    public function setCustomerReference($customer_reference)
    {
        $this->container['customer_reference'] = $customer_reference;

        return $this;
    }

    /**
     * Gets order_due
     *
     * @return float
     */
    public function getOrderDue()
    {
        return $this->container['order_due'];
    }

    /**
     * Sets order_due
     *
     * @param float $order_due order_due
     *
     * @return $this
     */
    public function setOrderDue($order_due)
    {
        $this->container['order_due'] = $order_due;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return string
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string $invoice_id invoice_id
     *
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \Swagger\Client\Model\BillingAddress1
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Swagger\Client\Model\BillingAddress1 $billing_address billing_address
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\OrderResponseModelItems[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\OrderResponseModelItems[] $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets po_number
     *
     * @return string
     */
    public function getPoNumber()
    {
        return $this->container['po_number'];
    }

    /**
     * Sets po_number
     *
     * @param string $po_number po_number
     *
     * @return $this
     */
    public function setPoNumber($po_number)
    {
        $this->container['po_number'] = $po_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


