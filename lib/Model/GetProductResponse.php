<?php
/**
 * GetProductResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Print-Gateway-prod
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2019-09-18T08:39:50Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetProductResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetProductResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetProductResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'title_single' => 'string',
        'max_designs' => 'float',
        'active' => 'object',
        'sku' => 'string',
        'properties' => '\Swagger\Client\Model\GetProductResponseProperties[]',
        'title_plural' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'title_single' => null,
        'max_designs' => null,
        'active' => null,
        'sku' => null,
        'properties' => null,
        'title_plural' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title_single' => 'titleSingle',
        'max_designs' => 'maxDesigns',
        'active' => 'active',
        'sku' => 'sku',
        'properties' => 'properties',
        'title_plural' => 'titlePlural'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title_single' => 'setTitleSingle',
        'max_designs' => 'setMaxDesigns',
        'active' => 'setActive',
        'sku' => 'setSku',
        'properties' => 'setProperties',
        'title_plural' => 'setTitlePlural'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title_single' => 'getTitleSingle',
        'max_designs' => 'getMaxDesigns',
        'active' => 'getActive',
        'sku' => 'getSku',
        'properties' => 'getProperties',
        'title_plural' => 'getTitlePlural'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title_single'] = isset($data['title_single']) ? $data['title_single'] : null;
        $this->container['max_designs'] = isset($data['max_designs']) ? $data['max_designs'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['title_plural'] = isset($data['title_plural']) ? $data['title_plural'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['title_single'] === null) {
            $invalidProperties[] = "'title_single' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        if ($this->container['properties'] === null) {
            $invalidProperties[] = "'properties' can't be null";
        }
        if ($this->container['title_plural'] === null) {
            $invalidProperties[] = "'title_plural' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title_single
     *
     * @return string
     */
    public function getTitleSingle()
    {
        return $this->container['title_single'];
    }

    /**
     * Sets title_single
     *
     * @param string $title_single Readable title for single product, e.g. Flyer
     *
     * @return $this
     */
    public function setTitleSingle($title_single)
    {
        $this->container['title_single'] = $title_single;

        return $this;
    }

    /**
     * Gets max_designs
     *
     * @return float
     */
    public function getMaxDesigns()
    {
        return $this->container['max_designs'];
    }

    /**
     * Sets max_designs
     *
     * @param float $max_designs Maximum number of designs for digital or sublimation printing methods
     *
     * @return $this
     */
    public function setMaxDesigns($max_designs)
    {
        $this->container['max_designs'] = $max_designs;

        return $this;
    }

    /**
     * Gets active
     *
     * @return object
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param object $active Whether the product is active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku Uniquely identifying sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \Swagger\Client\Model\GetProductResponseProperties[]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \Swagger\Client\Model\GetProductResponseProperties[] $properties List of properties defining this product
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets title_plural
     *
     * @return string
     */
    public function getTitlePlural()
    {
        return $this->container['title_plural'];
    }

    /**
     * Sets title_plural
     *
     * @param string $title_plural Readable title for multiple products, e.g. Flyers
     *
     * @return $this
     */
    public function setTitlePlural($title_plural)
    {
        $this->container['title_plural'] = $title_plural;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


